import { useState } from "react";
import MainPage from "./HomePage";
import Picture from "../common/Picture";
import InputField from "../common/InputField";
import Button from "../common/Button";
import AltAvatar from "../../assets/alt_avatar.png";
import Toast from "../common/Toast";

export default function FriendPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [toast, setToast] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [message, setMessage] = useState("");

  const [users, setUsers] = useState([
    { id: 1, name: "Nguy·ªÖn VƒÉn A", avatar: AltAvatar, status: "friend" },
    { id: 2, name: "Tr·∫ßn Th·ªã B", avatar: AltAvatar, status: "friend" },
    { id: 3, name: "L√™ VƒÉn C", avatar: AltAvatar, status: "friend" },
    { id: 10, name: "Ho√†ng Minh", avatar: AltAvatar, status: "stranger" },
    { id: 11, name: "Ph·∫°m Thanh", avatar: AltAvatar, status: "stranger" },
    { id: 101, name: "Ng√¥ Th·ªã D", avatar: AltAvatar, status: "requested", message: "K·∫øt b·∫°n nh√©" },
    { id: 102, name: "Phan VƒÉn E", avatar: AltAvatar, status: "requested", message: "K·∫øt b·∫°n nh√©" },
  ]);

  const filteredUsers = users.filter(u =>
    u.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleOpenAddFriend = (user) => {
    setSelectedUser(user);
    setMessage("");
  };

  const handleSendFriendRequest = () => {
    setToast({
      type: "success",
      message: `ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n ƒë·∫øn ${selectedUser.name} v·ªõi l·ªùi nh·∫Øn: "${message || "Xin ch√†o!"}"`,
    });

    setUsers(prev =>
      prev.map(u =>
        u.id === selectedUser.id ? { ...u, status: "requested", message } : u
      )
    );

    setSelectedUser(null);
  };

  const handleAccept = (req) => {
    setToast({ type: "success", message: `ƒê√£ ch·∫•p nh·∫≠n ${req.name}` });

    setUsers(prev =>
      prev.map(u =>
        u.id === req.id ? { ...u, status: "friend", message: undefined } : u
      )
    );
  };

  const handleReject = (req) => {
    setToast({ type: "info", message: `ƒê√£ t·ª´ ch·ªëi ${req.name}` });

    setUsers(prev =>
      prev.map(u =>
        u.id === req.id ? { ...u, status: "stranger", message: undefined } : u
      )
    );
  };

  return (
    <MainPage>
      <div className="flex flex-col h-screen bg-white">
        {/* Thanh t√¨m ki·∫øm */}
        <div className="p-4 border-b border-gray-200">
          <InputField
            placeholder="üîéÔ∏é T√¨m ki·∫øm"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full"
          />
        </div>

        <div className="p-4 flex-1 overflow-y-auto">
          {searchTerm === "" ? (
            <>
              {/* Danh s√°ch b·∫°n b√® */}
              <h3 className="text-[24px] font-medium mb-2">Danh s√°ch b·∫°n b√®</h3>
              {users.filter(u => u.status === "friend").length === 0 ? (
                <p className="text-gray-500 text-[20px]">Ch∆∞a c√≥ b·∫°n b√® n√†o</p>
              ) : (
                users
                  .filter(u => u.status === "friend")
                  .map(friend => (
                    <div
                      key={friend.id}
                      className="flex items-center space-x-3 p-3 border-b border-gray-100 hover:bg-gray-50"
                    >
                      <Picture src={friend.avatar} className="w-20 h-20" />
                      <p className="text-[20px] font-medium text-gray-900">{friend.name}</p>
                    </div>
                  ))
              )}

              {/* L·ªùi m·ªùi k·∫øt b·∫°n */}
              <h3 className="text-[24px] font-medium mt-4 mb-2">L·ªùi m·ªùi k·∫øt b·∫°n</h3>
              {users.filter(u => u.status === "requested").length === 0 ? (
                <p className="text-gray-500 text-[20px]">Kh√¥ng c√≥ l·ªùi m·ªùi n√†o</p>
              ) : (
                users
                  .filter(u => u.status === "requested")
                  .map(req => (
                    <div
                      key={req.id}
                      className="flex items-center justify-between p-3 border-b border-gray-100 hover:bg-gray-50"
                    >
                      <div className="flex items-center space-x-3">
                        <Picture src={req.avatar} className="w-20 h-20" />
                        <div>
                          <p className="text-[20px] font-medium text-gray-900">{req.name}</p>
                          <p className="text-[18px] text-gray-500">{req.message}</p>
                        </div>
                      </div>
                      <div className="flex space-x-2">
                        <Button text="Ch·∫•p nh·∫≠n" onClick={() => handleAccept(req)} variant="rounded" />
                        <Button text="T·ª´ ch·ªëi" onClick={() => handleReject(req)} variant="rounded" />
                      </div>
                    </div>
                  ))
              )}
            </>
          ) : (
            <>
              <h3 className="text-[24px] font-medium mb-2">K·∫øt qu·∫£ t√¨m ki·∫øm</h3>
              {filteredUsers.length === 0 ? (
                <p className="text-gray-500 text-[20px]">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</p>
              ) : (
                filteredUsers.map(u => (
                  <div
                    key={u.id}
                    className="flex items-center justify-between p-3 border-b border-gray-100 hover:bg-gray-50"
                  >
                    <div className="flex items-center space-x-3">
                      <Picture src={u.avatar} className="w-20 h-20" />
                      <div className="flex-1">
                        <p className="text-[20px] font-medium text-gray-900">{u.name}</p>
                        <p className="text-[18px] text-gray-500">
                          {u.status === "friend"
                            ? "ƒê√£ l√† b·∫°n b√®"
                            : u.status === "requested"
                            ? "ƒêang ch·ªù ph·∫£n h·ªìi"
                            : "Ng∆∞·ªùi l·∫°"}
                        </p>
                      </div>
                    </div>
                    {u.status === "stranger" && (
                      <Button
                        text="K·∫øt b·∫°n"
                        onClick={() => handleOpenAddFriend(u)}
                        variant="rounded"
                      />
                    )}
                  </div>
                ))
              )}
            </>
          )}
        </div>

        {/* Modal nh·∫≠p l·ªùi nh·∫Øn */}
        {selectedUser && (
          <div className="fixed inset-0 bg-black/30 flex items-center justify-center z-50">
            <div className="bg-white rounded-2xl p-6 w-80 shadow-lg">
              <h3 className="text-[24px] font-semibold text-gray-800 mb-2">
                G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
              </h3>
              <p className="text-[20px] text-gray-600 mb-3">
                ƒê·∫øn: <span className="font-medium">{selectedUser.name}</span>
              </p>
              <textarea
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Nh·∫≠p l·ªùi nh·∫Øn (tu·ª≥ ch·ªçn)"
                className="w-full border border-gray-300 rounded-lg p-2 text-[20px] focus:outline-none focus:ring"
                rows={3}
              />
              <div className="flex justify-end space-x-2 mt-3">
                <Button text="H·ªßy" variant="rounded" onClick={() => setSelectedUser(null)} />
                <Button text="G·ª≠i" onClick={handleSendFriendRequest} />
              </div>
            </div>
          </div>
        )}

        {toast && (
          <Toast message={toast.message} type={toast.type} onClose={() => setToast(null)} />
        )}
      </div>
    </MainPage>
  );
}
